use ciborium::cbor;
use coset::CoseKeyBuilder;

use super::*;
use crate::utils::rand::random_vec;

#[test]
fn deserialize_authenticator_data_with_at_and_ed() {
    // This is authenticator data extracted from a yubikey version 5
    let data = [
        0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20, 0xcf,
        0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b, 0x60, 0x84,
        0x1e, 0xf0, 0xc5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x98, 0x51, 0xdc, 0x8b,
        0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0x5e, 0x4c, 0x14, 0x04, 0x4f, 0xf8, 0x87,
        0x04, 0x11, 0x5e, 0x6c, 0x58, 0x94, 0xb8, 0x69, 0xbb, 0x45, 0x3c, 0x3f, 0xe2, 0x1e, 0xb1,
        0x22, 0x44, 0xc6, 0xe7, 0xe9, 0x6a, 0xbe, 0xd3, 0x0f, 0x18, 0x1b, 0x9f, 0x86, 0xa5, 0x01,
        0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20, 0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef,
        0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0xad, 0xd9, 0xa6, 0x97, 0xbb, 0x48, 0xd9, 0xd7, 0xff,
        0x91, 0x0f, 0x0a, 0x6a, 0xc1, 0x0b, 0x91, 0x2b, 0xe9, 0x58, 0x22, 0x58, 0x20, 0x46, 0x78,
        0x6f, 0x2a, 0x95, 0x76, 0x69, 0x8c, 0x9f, 0x3a, 0xe2, 0x52, 0x3b, 0x4e, 0xb9, 0x4b, 0x8e,
        0x07, 0x4c, 0x35, 0xab, 0xc4, 0xdf, 0x68, 0x8f, 0xcd, 0x85, 0xd2, 0x9a, 0x01, 0xab, 0xba,
        0xa1, 0x6b, 0x63, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x02,
    ];
    let auth_data =
        AuthenticatorData::from_slice(&data).expect("could not parse the authenticator data");

    let expected = AuthenticatorData {
        rp_id_hash: [
            0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20,
            0xcf, 0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b,
            0x60, 0x84, 0x1e, 0xf0,
        ],
        flags: Flags::UP | Flags::UV | Flags::AT | Flags::ED,
        counter: Some(1),
        attested_credential_data: Some(AttestedCredentialData {
            // interestingly a yubikey returns an empty AAGUID
            aaguid: Aaguid([0; 16]),
            credential_id: vec![
                0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0x5e,
                0x4c, 0x14, 0x04, 0x4f, 0xf8, 0x87, 0x04, 0x11, 0x5e, 0x6c, 0x58, 0x94, 0xb8, 0x69,
                0xbb, 0x45, 0x3c, 0x3f, 0xe2, 0x1e, 0xb1, 0x22, 0x44, 0xc6, 0xe7, 0xe9, 0x6a, 0xbe,
                0xd3, 0x0f, 0x18, 0x1b, 0x9f, 0x86,
            ],
            key: CoseKeyBuilder::new_ec2_pub_key(
                coset::iana::EllipticCurve::P_256,
                vec![
                    0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf,
                    0xad, 0xd9, 0xa6, 0x97, 0xbb, 0x48, 0xd9, 0xd7, 0xff, 0x91, 0x0f, 0x0a, 0x6a,
                    0xc1, 0x0b, 0x91, 0x2b, 0xe9, 0x58,
                ],
                vec![
                    0x46, 0x78, 0x6f, 0x2a, 0x95, 0x76, 0x69, 0x8c, 0x9f, 0x3a, 0xe2, 0x52, 0x3b,
                    0x4e, 0xb9, 0x4b, 0x8e, 0x07, 0x4c, 0x35, 0xab, 0xc4, 0xdf, 0x68, 0x8f, 0xcd,
                    0x85, 0xd2, 0x9a, 0x01, 0xab, 0xba,
                ],
            )
            .algorithm(coset::iana::Algorithm::ES256)
            .build(),
        }),
        extensions: Some(
            cbor!({
                "credProtect" => 2
            })
            .unwrap(),
        ),
    };
    assert_eq!(expected, auth_data);
}

#[test]
fn deserialize_authenticator_data_with_only_at() {
    // This is authenticator data extracted from a yubikey version 5 with the extensions
    // parameter removed
    let data = [
        0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20, 0xcf,
        0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b, 0x60, 0x84,
        0x1e, 0xf0, 0x45, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x98, 0x51, 0xdc, 0x8b,
        0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0x5e, 0x4c, 0x14, 0x04, 0x4f, 0xf8, 0x87,
        0x04, 0x11, 0x5e, 0x6c, 0x58, 0x94, 0xb8, 0x69, 0xbb, 0x45, 0x3c, 0x3f, 0xe2, 0x1e, 0xb1,
        0x22, 0x44, 0xc6, 0xe7, 0xe9, 0x6a, 0xbe, 0xd3, 0x0f, 0x18, 0x1b, 0x9f, 0x86, 0xa5, 0x01,
        0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20, 0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef,
        0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0xad, 0xd9, 0xa6, 0x97, 0xbb, 0x48, 0xd9, 0xd7, 0xff,
        0x91, 0x0f, 0x0a, 0x6a, 0xc1, 0x0b, 0x91, 0x2b, 0xe9, 0x58, 0x22, 0x58, 0x20, 0x46, 0x78,
        0x6f, 0x2a, 0x95, 0x76, 0x69, 0x8c, 0x9f, 0x3a, 0xe2, 0x52, 0x3b, 0x4e, 0xb9, 0x4b, 0x8e,
        0x07, 0x4c, 0x35, 0xab, 0xc4, 0xdf, 0x68, 0x8f, 0xcd, 0x85, 0xd2, 0x9a, 0x01, 0xab, 0xba,
    ];
    let auth_data =
        AuthenticatorData::from_slice(&data).expect("could not parse the authenticator data");

    let expected = AuthenticatorData {
        rp_id_hash: [
            0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20,
            0xcf, 0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b,
            0x60, 0x84, 0x1e, 0xf0,
        ],
        flags: Flags::UP | Flags::UV | Flags::AT,
        counter: Some(1),
        attested_credential_data: Some(AttestedCredentialData {
            // interestingly a yubikey returns an empty AAGUID
            aaguid: Aaguid([0; 16]),
            credential_id: vec![
                0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf, 0x5e,
                0x4c, 0x14, 0x04, 0x4f, 0xf8, 0x87, 0x04, 0x11, 0x5e, 0x6c, 0x58, 0x94, 0xb8, 0x69,
                0xbb, 0x45, 0x3c, 0x3f, 0xe2, 0x1e, 0xb1, 0x22, 0x44, 0xc6, 0xe7, 0xe9, 0x6a, 0xbe,
                0xd3, 0x0f, 0x18, 0x1b, 0x9f, 0x86,
            ],
            key: CoseKeyBuilder::new_ec2_pub_key(
                coset::iana::EllipticCurve::P_256,
                vec![
                    0x0c, 0x98, 0x51, 0xdc, 0x8b, 0xd1, 0xef, 0x2d, 0x08, 0x4b, 0x20, 0x1c, 0xbf,
                    0xad, 0xd9, 0xa6, 0x97, 0xbb, 0x48, 0xd9, 0xd7, 0xff, 0x91, 0x0f, 0x0a, 0x6a,
                    0xc1, 0x0b, 0x91, 0x2b, 0xe9, 0x58,
                ],
                vec![
                    0x46, 0x78, 0x6f, 0x2a, 0x95, 0x76, 0x69, 0x8c, 0x9f, 0x3a, 0xe2, 0x52, 0x3b,
                    0x4e, 0xb9, 0x4b, 0x8e, 0x07, 0x4c, 0x35, 0xab, 0xc4, 0xdf, 0x68, 0x8f, 0xcd,
                    0x85, 0xd2, 0x9a, 0x01, 0xab, 0xba,
                ],
            )
            .algorithm(coset::iana::Algorithm::ES256)
            .build(),
        }),
        extensions: None,
    };
    assert_eq!(expected, auth_data);
}

#[test]
fn deserialize_authenticator_data_with_only_ed() {
    // This is authenticator data extracted from a yubikey version 5 with the Attested credential
    // data removed.
    let data = [
        0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20, 0xcf,
        0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b, 0x60, 0x84,
        0x1e, 0xf0, 0x85, 0x00, 0x00, 0x00, 0x01, 0xa1, 0x6b, 0x63, 0x72, 0x65, 0x64, 0x50, 0x72,
        0x6f, 0x74, 0x65, 0x63, 0x74, 0x02,
    ];
    let auth_data =
        AuthenticatorData::from_slice(&data).expect("could not parse the authenticator data");

    let expected = AuthenticatorData {
        rp_id_hash: [
            0x74, 0xa6, 0xea, 0x92, 0x13, 0xc9, 0x9c, 0x2f, 0x74, 0xb2, 0x24, 0x92, 0xb3, 0x20,
            0xcf, 0x40, 0x26, 0x2a, 0x94, 0xc1, 0xa9, 0x50, 0xa0, 0x39, 0x7f, 0x29, 0x25, 0x0b,
            0x60, 0x84, 0x1e, 0xf0,
        ],
        flags: Flags::UP | Flags::UV | Flags::ED,
        counter: Some(1),
        attested_credential_data: None,
        extensions: Some(
            cbor!({
                "credProtect" => 2
            })
            .unwrap(),
        ),
    };
    assert_eq!(expected, auth_data);
}

#[test]
fn round_trip_deserialization() {
    let expected = AuthenticatorData::new("future.1password.com", Some(0))
        .set_attested_credential_data(AttestedCredentialData {
            aaguid: Aaguid::new_empty(),
            credential_id: random_vec(16),
            key: CoseKeyBuilder::new_ec2_pub_key(
                coset::iana::EllipticCurve::P_256,
                // seeing as these are random, it is not a valid key, so don't use this.
                random_vec(32),
                random_vec(32),
            )
            .algorithm(coset::iana::Algorithm::ES256)
            .build(),
        });

    let auth_data_bytes = expected.to_vec();

    let auth_data = AuthenticatorData::from_slice(&auth_data_bytes).expect("could not deserialize");

    assert_eq!(expected, auth_data);
}

#[test]
fn add_empty_extensions_does_not_add_flag() {
    // Make credential with None
    let make_auth_data = AuthenticatorData::new("1password.com", None)
        .set_make_credential_extensions(None)
        .expect("falsely tried to serialize");
    assert!(!make_auth_data.flags.contains(Flags::ED));

    // Make credential with empty extension
    let make_auth_data = AuthenticatorData::new("1password.com", None)
        .set_make_credential_extensions(Some(make_credential::SignedExtensionOutputs {
            hmac_secret: None,
            hmac_secret_mc: None,
        }))
        .expect("falsely tried to serialize");
    assert!(!make_auth_data.flags.contains(Flags::ED));

    // Get assertion with None
    let make_auth_data = AuthenticatorData::new("1password.com", None)
        .set_assertion_extensions(None)
        .expect("falsely tried to serialize");
    assert!(!make_auth_data.flags.contains(Flags::ED));

    // Get assertion with empty extension
    let make_auth_data = AuthenticatorData::new("1password.com", None)
        .set_assertion_extensions(Some(get_assertion::SignedExtensionOutputs {
            hmac_secret: None,
        }))
        .expect("falsely tried to serialize");
    assert!(!make_auth_data.flags.contains(Flags::ED));
}
